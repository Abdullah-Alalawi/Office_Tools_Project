name: Office_Tools_Kit Security Scans
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 1'  # Weekly scans

jobs:
  # 1. React-Specific SAST (Updated)
  sast:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: |
          npm install --legacy-peer-deps
          npm install eslint-plugin-security@latest --save-dev
          npm install @babel/eslint-parser@latest --save-dev

      - name: Configure ESLint for React
        run: |
          echo '{
            "parser": "@babel/eslint-parser",
            "parserOptions": {
              "ecmaVersion": 2021,
              "sourceType": "module",
              "ecmaFeatures": {
                "jsx": true
              },
              "requireConfigFile": false
            },
            "env": {
              "browser": true,
              "es2021": true
            },
            "plugins": ["security"],
            "rules": {
              "security/detect-object-injection": 2,
              "security/detect-non-literal-require": 2,
              "security/detect-possible-timing-attacks": 2
            }
          }' > .eslintrc.json

      - name: Run ESLint Security Audit
        run: npx eslint src/

  # 2. Dependency Scanning (React-focused)
  dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # OWASP Scan with React adjustments
      - name: OWASP Dependency Scan
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Office_Tools_Kit'
          format: 'ALL'
          failOnCVSS: 7
          skip: '**/__tests__/**,**/cypress/**,**/node_modules/**'
          scanPath: 'src/'
          outputDirectory: './reports'

      # npm audit with React criticals only
      - name: npm Audit (Critical Only)
        run: |
          npm install
          npm audit --audit-level=critical

      # Check for vulnerable Codespaces features
      - name: Check React DevContainer Features
        run: |
          if [ -f .devcontainer/devcontainer.json ]; then
            echo "Installed Features:"
            jq -r '.features | to_entries[] | "\(.key): \(.value.version)"' .devcontainer/devcontainer.json
            jq -e '.features["ghcr.io/devcontainers/features/node:1"].version >= "18"' .devcontainer/devcontainer.json
          fi

  # 3. Secret Scanning (Enhanced for React)
  secrets:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Gitleaks with React-specific patterns
      - name: Gitleaks Scan
        uses: gitleaks/gitleaks-action@v2
        with:
          config-path: .gitleaks.toml
          extra-args: '--no-git'

      # React environment variable check
      - name: Check Env Variables
        run: |
          grep -r 'REACT_APP_' src/ || echo "No React env variables found"
          grep -r 'process.env' src/ || echo "No process.env usage found"

  # 4. Codespaces Hardening
  codespaces:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Verify devcontainer.json security settings
      - name: Validate DevContainer Config
        run: |
          if [ -f .devcontainer/devcontainer.json ]; then
            echo "Security Checks:"
            jq -e '.containerUser != "root"' .devcontainer/devcontainer.json
            jq -e '.remoteUser != "root"' .devcontainer/devcontainer.json
            jq -e '.postCreateCommand | contains("sudo") | not' .devcontainer/devcontainer.json
            jq -e '.customizations.vscode.settings["security.workspace.trust.enabled"] == true' .devcontainer/devcontainer.json
          fi

      # Check for exposed React ports
      - name: Verify React Ports
        run: |
          if [ -f .devcontainer/devcontainer.json ]; then
            echo "Port Configuration:"
            jq '.forwardPorts' .devcontainer/devcontainer.json
            jq -e '.forwardPorts | contains([3000])' .devcontainer/devcontainer.json
            jq -e '.forwardPorts | contains([22, 3306, 5432]) | not' .devcontainer/devcontainer.json
          fi
